"""Audit Log Everything

Revision ID: 705c79f09e28
Revises: 00ac28dee474
Create Date: 2024-12-20 00:04:05.928818

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "705c79f09e28"
down_revision = "00ac28dee474"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "audit_logs",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "time_created",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "type",
            sa.Enum(
                "MACHINE_USED",
                "MACHINE_CREATED",
                "MACHINE_EDITED",
                "MACHINE_DELETED",
                "MACHINE_TYPE_CREATED",
                "MACHINE_TYPE_EDITED",
                "MACHINE_TYPE_DELETED",
                "MACHINE_GROUP_CREATED",
                "MACHINE_GROUP_EDITED",
                "MACHINE_GROUP_DELETED",
                "MACHINE_USAGE_CREATED",
                "MACHINE_USAGE_EDITED",
                "MACHINE_USAGE_DELETED",
                "MACHINE_USAGE_CLEARED",
                "MACHINE_USAGE_FAILED",
                "RESOURCE_CREATED",
                "RESOURCE_EDITED",
                "RESOURCE_DELETED",
                "RESOURCE_SLOT_CREATED",
                "RESOURCE_SLOT_EDITED",
                "RESOURCE_SLOT_DELETED",
                "RESOURCE_USAGE_QUANTITY_CREATED",
                "RESOURCE_USAGE_QUANTITY_EDITED",
                "RESOURCE_USAGE_QUANTITY_DELETED",
                "ROLE_CREATED",
                "ROLE_EDITED",
                "ROLE_DELETED",
                "SEMESTER_CREATED",
                "SEMESTER_EDITED",
                "SEMESTER_DELETED",
                "USER_CREATED",
                "USER_EDITED",
                "USER_DELETED",
                "ORG_CREATED",
                "ORG_EDITED",
                "ORG_DELETED",
                name="logtype",
            ),
            nullable=False,
        ),
        sa.Column("content", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.add_column(
        "machine_usages", sa.Column("duration_seconds", sa.Integer(), nullable=False)
    )
    op.drop_constraint("fk_failed_by", "machine_usages", type_="foreignkey")
    op.drop_constraint("fk_cleared_by", "machine_usages", type_="foreignkey")
    op.drop_column("machine_usages", "time_started")
    op.drop_column("machine_usages", "time_finished")
    op.drop_column("machine_usages", "failed_by_id")
    op.drop_column("machine_usages", "cleared_by_id")
    op.drop_column("machine_usages", "failure_reason")
    op.drop_column("machine_usages", "failed_at")
    op.add_column("machines", sa.Column("disabled", sa.Boolean(), nullable=False))
    op.alter_column("machines", "group_id", existing_type=sa.UUID(), nullable=True)
    op.add_column(
        "resource_usage_quantities",
        sa.Column("cpu_at_usage", sa.DECIMAL(precision=10, scale=5), nullable=False),
    )
    op.drop_constraint(
        "resource_usage_quantities_resource_slot_id_fkey",
        "resource_usage_quantities",
        type_="foreignkey",
    )
    op.drop_column("resource_usage_quantities", "resource_slot_id")
    op.alter_column(
        "state", "active_semester_id", existing_type=sa.UUID(), nullable=True
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "state", "active_semester_id", existing_type=sa.UUID(), nullable=False
    )
    op.add_column(
        "resource_usage_quantities",
        sa.Column("resource_slot_id", sa.UUID(), autoincrement=False, nullable=False),
    )
    op.create_foreign_key(
        "resource_usage_quantities_resource_slot_id_fkey",
        "resource_usage_quantities",
        "resource_slots",
        ["resource_slot_id"],
        ["id"],
    )
    op.drop_column("resource_usage_quantities", "cpu_at_usage")
    op.alter_column("machines", "group_id", existing_type=sa.UUID(), nullable=False)
    op.drop_column("machines", "disabled")
    op.add_column(
        "machine_usages",
        sa.Column(
            "failed_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "machine_usages",
        sa.Column("failure_reason", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "machine_usages",
        sa.Column("cleared_by_id", sa.UUID(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "machine_usages",
        sa.Column("failed_by_id", sa.UUID(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "machine_usages",
        sa.Column(
            "time_finished", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
    )
    op.add_column(
        "machine_usages",
        sa.Column(
            "time_started", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
    )
    op.create_foreign_key(
        "fk_cleared_by", "machine_usages", "users", ["cleared_by_id"], ["id"]
    )
    op.create_foreign_key(
        "fk_failed_by", "machine_usages", "users", ["failed_by_id"], ["id"]
    )
    op.drop_column("machine_usages", "duration_seconds")
    op.drop_table("audit_logs")
    # ### end Alembic commands ###
